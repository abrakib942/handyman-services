// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       UserRoles @default(user)
  contactNo  String?
  address    String?
  profileImg String?
  cart       Cart[]
  reviews    Review[]
  booking    Booking[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  title       String   @unique
  heading     String?
  images      String[]
  description String?

  reviews   Review[]
  booking   Booking[]
  workTypes WorkType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkType {
  id          String    @id @default(uuid())
  title       String
  description String?
  images      String[]
  price       Float
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  cart        Cart[]
  reviews     Review[]
  booking     Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String   @id @default(uuid())
  quantity   Int      @default(1)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  workType   WorkType @relation(fields: [workTypeId], references: [id])
  workTypeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String    @id @default(uuid())
  rating     Float
  comment    String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  String
  WorkType   WorkType? @relation(fields: [workTypeId], references: [id])
  workTypeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id         String        @id @default(uuid())
  date       DateTime
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  service    Service?      @relation(fields: [serviceId], references: [id])
  serviceId  String?
  status     BookingStatus @default(pending)
  workType   WorkType      @relation(fields: [workTypeId], references: [id])
  workTypeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRoles {
  admin
  super_admin
  user
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}
